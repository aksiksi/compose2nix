{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."test-first" = {
    image = "nginx:latest";
    environment = {
      "CLOUDFLARE_API_KEY" = "yomama";
      "CLOUDFLARE_EMAIL" = "aaa@aaa.com";
      "DEPTH" = "10";
      "DOMAIN" = "hello.us";
      "HOME_DOMAIN" = "hey.hello.us";
      "NAME" = "first";
      "PGID" = "1000";
      "PUID" = "1000";
      "THEMEPARK_THEME" = "potato";
      "TIMEZONE" = "America/New_York";
    };
    environmentFiles = [
      "override.env"
      "testdata/first.env"
      "testdata/input.env"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=first"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-first" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-second" = {
    image = "nginx:latest";
    environment = {
      "DEPTH" = "20";
      "NAME" = "second";
    };
    environmentFiles = [
      "testdata/input.env"
      "testdata/second.env"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=second"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-second" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };

  # Networks
  systemd.services."docker-network-test_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f test_default";
    };
    script = ''
      docker network inspect test_default || docker network create test_default
    '';
    partOf = [ "docker-compose-test-root.target" ];
    wantedBy = [ "docker-compose-test-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-test-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
