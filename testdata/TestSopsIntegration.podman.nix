{ pkgs, lib, config, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [ 53 ];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."test-backend" = {
    image = "alpine:latest";
    environmentFiles = [
      config.sops.secrets."folder/example-2.env".path
    ];
    cmd = [ "sleep" "3600" ];
    labels = {
      "compose2nix.settings.sops.secrets" = "folder/example-2.env";
    };
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=backend"
      "--network=test_default"
    ];
  };
  systemd.services."podman-test-backend" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-test_default.service"
    ];
    requires = [
      "podman-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-webapp" = {
    image = "nginx:latest";
    environmentFiles = [
      config.sops.secrets."example.env".path
      config.sops.secrets."folder/example-2.env".path
    ];
    ports = [
      "8080:80/tcp"
    ];
    labels = {
      "compose2nix.settings.sops.secrets" = "example.env,folder/example-2.env";
    };
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=webapp"
      "--network=test_default"
    ];
  };
  systemd.services."podman-test-webapp" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-test_default.service"
    ];
    requires = [
      "podman-network-test_default.service"
    ];
  };

  # Networks
  systemd.services."podman-network-test_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f test_default";
    };
    script = ''
      podman network inspect test_default || podman network create test_default
    '';
    partOf = [ "podman-compose-test-root.target" ];
    wantedBy = [ "podman-compose-test-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-test-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
