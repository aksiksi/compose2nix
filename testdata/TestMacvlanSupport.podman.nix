{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."container" = {
    image = "ghcr.io/container/container:latest";
    volumes = [
      "/opt/container/certs:/container/certs:rw"
    ];
    ports = [
      "80:80/tcp"
      "443:443/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--dns=192.168.8.1"
      "--hostname=tc"
      "--ip=192.168.8.10"
      "--mac-address=10:50:02:01:00:02"
      "--network-alias=teddycloud"
      "--network=myproject_homenet"
    ];
  };
  systemd.services."podman-container" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-myproject_homenet.service"
    ];
    requires = [
      "podman-network-myproject_homenet.service"
    ];
  };

  # Networks
  systemd.services."podman-network-myproject_homenet" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f myproject_homenet";
    };
    script = ''
      podman network inspect myproject_homenet || podman network create myproject_homenet --driver=macvlan --opt=parent=enp2s0 --subnet=192.168.8.0/24 --gateway=192.168.8.1
    '';
    partOf = [ "podman-compose-myproject-root.target" ];
    wantedBy = [ "podman-compose-myproject-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-myproject-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
