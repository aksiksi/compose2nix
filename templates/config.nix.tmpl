{{- if .WriteNixSetup -}}
# Runtime
virtualisation.{{.Runtime}} = {
  enable = true;
  autoPrune.enable = true;
  {{- if eq (.Runtime | printf "%s") "podman"}}
  dockerCompat = true;
  {{- end}}
};
{{- if eq (.Runtime | printf "%s") "podman"}}

# Enable container name DNS for all Podman networks.
networking.firewall.interfaces = let
  matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
in {
  "${matchAll}".allowedUDPPorts = [ 53 ];
};

virtualisation.oci-containers.backend = "{{.Runtime}}";
{{- else}}
virtualisation.oci-containers.backend = "{{.Runtime}}";
{{- end}}
{{- end}}

{{- if .Containers}}

# Containers
{{- range .Containers}}
{{execTemplate "container.nix.tmpl" .}}
{{- end}}
{{- end}}

{{- if .Networks}}

# Networks
{{- range .Networks}}
{{execTemplate "network.nix.tmpl" .}}
{{- end}}
{{- end}}

{{- if .Volumes}}

# Volumes
{{- range .Volumes}}
{{execTemplate "volume.nix.tmpl" .}}
{{- end}}
{{- end}}

{{- if .Builds}}

# Builds
{{- range .Builds}}
{{execTemplate "build.nix.tmpl" .}}
{{- end}}
{{- end}}

{{- if .CreateRootTarget}}

# Root service
# When started, this will automatically create all resources and start
# the containers. When stopped, this will teardown all resources.
systemd.targets."{{rootTarget}}" = {
  unitConfig = {
    Description = "Root target generated by compose2nix.";
  };
  {{- if .AutoStart}}
  wantedBy = [ "multi-user.target" ];
  {{- end}}
};
{{- end -}}
