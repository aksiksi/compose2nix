{{- if .Version -}}
# Auto-generated using compose2nix v{{.Version}}.
{ pkgs, lib, ... }:
{{- else -}}
{ pkgs, lib, ... }:
{{- end}}

{
  {{- if .WriteNixSetup}}
  # Runtime
  virtualisation.{{.Runtime}} = {
    enable = true;
    autoPrune.enable = true;
    {{- if eq (.Runtime | printf "%s") "podman"}}
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
    {{- end}}
  };
  {{- if eq (.Runtime | printf "%s") "podman"}}

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "{{.Runtime}}";
  {{- else}}
  virtualisation.oci-containers.backend = "{{.Runtime}}";
  {{- end}}
  {{- end}}

  {{- if .Containers}}

  # Containers
  {{- range .Containers}}
{{execTemplate "container.nix.tmpl" . | indent 2}}
  {{- end}}
  {{- end}}

  {{- if .Networks}}

  # Networks
  {{- range .Networks}}
{{execTemplate "network.nix.tmpl" . | indent 2}}
  {{- end}}
  {{- end}}

  {{- if .Volumes}}

  # Volumes
  {{- range .Volumes}}
{{execTemplate "volume.nix.tmpl" . | indent 2}}
  {{- end}}
  {{- end}}

  {{- if .Builds}}

  # Builds
  #
  # NOTE: These must be run manually before running any containers that require
  # them to be present in the image store.
  {{- range .Builds}}
{{execTemplate "build.nix.tmpl" . | indent 2}}
  {{- end}}
  {{- end}}

  {{- if .CreateRootTarget}}

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."{{rootTarget}}" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    {{- if .AutoStart}}
    wantedBy = [ "multi-user.target" ];
    {{- end}}
  };
  {{- end}}
}
